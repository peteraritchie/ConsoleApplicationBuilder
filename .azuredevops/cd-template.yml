parameters:
- name: verbosity
  displayName: 'verbosity of this run'
  type: string
  default: Minimal
  values:
  - Detailed
  - Quiet
  - Diagnostic
  - Minimal
- name: versionSuffixType
  displayName: Nuget Version Suffix Type
  type: string
  default: none
  values:
  - rc.
  - beta.
  - alpha.
  - none

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/dotnet-new-template
      - .azuredevops/cd-template.yml
      - .azuredevops/templates

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  majorVersion: 1
  minorVersion: 1
  dotNetVersion: '8.x'
  sourceDir: 'src/dotnet-new-template'
  buildConfiguration: 'Release'
  nugetServiceConnection: 'Nuget - PRI.ConsoleApplicationBuilder' # 'TestNuGet - PRI-ConsoleApplicationBuilder'
  patchVersion: $[counter(format('{0}-{1}', variables['majorVersion'], variables['minorVersion']), 0)]
  buildVersion: $[counter(format('{0}-{1}-{2}', variables['majorVersion'], variables['minorVersion'], variables['versionSuffixType']), 0)]
  ${{ if not( eq(parameters['versionSuffixType'], 'none') ) }}:
    versionSuffix: '-${{ parameters.versionSuffixType }}$(buildVersion)'
  ${{ else }}:
    versionSuffix: ''
  packageVersion: '$(majorVersion).$(minorVersion).$(patchVersion)$(versionSuffix)'

stages:
- stage: build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotNetVersion)'
        inputs:
          packageType: sdk
          version: $(dotNetVersion)

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '$(sourceDir)/**/*.csproj'
          verbosityRestore: '${{ parameters.verbosity }}'

      - task: DotNetCoreCLI@2
        displayName: 'Pack'
        inputs:
          command: 'pack'
          configuration: '$(buildConfiguration)'
          verbosityPack: '${{ parameters.verbosity }}'
          packagesToPack: '$(sourceDir)/Pri.ConsoleApplicationBuilder.Templates.csproj'
          buildProperties: 'Version=$(packageVersion)'

      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'NuGet'
          targetPath: '$(Build.ArtifactStagingDirectory)'
          publishLocation: 'pipeline'

# to create a service connection for NuGet
#   - see also: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml
# to create an environment for the service connection
#   - see also: https://learn.microsoft.com/en-us/azure/deployment-environments/how-to-create-access-environments
- stage: nuget_publish
  displayName: 'NuGet Publish'
  dependsOn: build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: nuget_push
    displayName: 'NuGet Push'
    environment: 'NuGet'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'NuGet'
                targetPath: '$(Build.ArtifactStagingDirectory)'

            - task: NuGetCommand@2
              displayName: 'NuGet Push'
              inputs:
                command: push
                nuGetFeedType: external
                publishFeedCredentials: $(nugetServiceConnection)